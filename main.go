package main

import (
	"flag"
	"fmt"
	"github.com/gorilla/websocket"
	"github.com/julienschmidt/httprouter"
	"gitlab.com/adoontheway/goserver/server"
	"log"
	"net/http"
	"os"
	"runtime"
)

func init() {
	runtime.GOMAXPROCS(runtime.NumCPU())
}

var addr = flag.String("add", ":8080", "http service address")

var upgrader = websocket.Upgrader{
	ReadBufferSize:  1024,
	WriteBufferSize: 1024,
	CheckOrigin: func(r *http.Request) bool {
		return true
	},
}

func main() {
	flag.Parse()
	f, err := os.OpenFile("./log/hehe.log", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)
	if err != nil {
		log.Fatalf("error opening file: %v", err)
	}
	defer f.Close()
	log.SetOutput(f)

	s := server.NewServer(100)

	router := httprouter.New()
	router.GET("/", Index)
	router.POST("/login/:account", func(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
		Login(s, w, r, p)
	})
	router.GET("/ws", func(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
		ServeWS(s, w, r, p)
	})

	err = http.ListenAndServe(*addr, router)
	checkErr(err)
	log.Printf("Http is listening on:%s", *addr)
}

func ServeWS(s *server.Server, w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", 405)
		return
	}

	conn, err := upgrader.Upgrade(w, r, nil)
	checkErr(err)
	c, err := s.NewClient(conn)
	checkErr(err)
	c.Start()
}

func Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	log.Print(r.URL)
	if r.URL.Path != "/" {
		http.Error(w, "Not Found", http.StatusNotFound)
		return
	}
	if r.Method != "GET" {
		http.Error(w, "Method not allowed.", http.StatusMethodNotAllowed)
		return
	}
	http.ServeFile(w, r, "./resource/index.html")
}

//return token then login through ws with token
//in production env, the token is generated by page
// this function must be depricated in production
func Login(s *server.Server, w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	account := ps.ByName("account")
	session := s.GenSession(account)
	n, err := fmt.Fprint(w, session)
	log.Printf("Login Session:%s, bytes:%d", session, n)
	checkErr(err)
}

func checkErr(err error) {
	if err != nil {
		log.Fatalln(err)
	}
}
